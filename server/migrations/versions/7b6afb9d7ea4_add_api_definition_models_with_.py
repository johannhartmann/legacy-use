"""Add API definition models with versioning

Revision ID: 7b6afb9d7ea4
Revises: 222c1b640d27
Create Date: 2025-03-12 22:28:06.237529

"""

from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op
from sqlalchemy.exc import OperationalError

# revision identifiers, used by Alembic.
revision: str = '7b6afb9d7ea4'
down_revision: Union[str, None] = '222c1b640d27'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Create api_definitions table
    try:
        op.create_table(
            'api_definitions',
            sa.Column('id', sa.TEXT(), nullable=False),
            sa.Column('name', sa.String(), nullable=False),
            sa.Column('description', sa.String(), nullable=False),
            sa.Column('created_at', sa.DateTime(), nullable=True),
            sa.Column('updated_at', sa.DateTime(), nullable=True),
            sa.Column('is_archived', sa.Boolean(), nullable=True),
            sa.PrimaryKeyConstraint('id'),
            sa.UniqueConstraint('name'),
        )
    except OperationalError as e:
        if 'table api_definitions already exists' in str(e):
            pass  # Table already exists, continue with migration
        else:
            raise  # Re-raise if it's a different error

    # Create api_definition_versions table
    try:
        op.create_table(
            'api_definition_versions',
            sa.Column('id', sa.TEXT(), nullable=False),
            sa.Column('api_definition_id', sa.TEXT(), nullable=False),
            sa.Column('version_number', sa.String(), nullable=False),
            sa.Column('parameters', sa.JSON(), nullable=False),
            sa.Column('prompt', sa.String(), nullable=False),
            sa.Column('prompt_cleanup', sa.String(), nullable=False),
            sa.Column('response_example', sa.JSON(), nullable=False),
            sa.Column('created_at', sa.DateTime(), nullable=True),
            sa.Column('is_active', sa.Boolean(), nullable=True),
            sa.ForeignKeyConstraint(
                ['api_definition_id'],
                ['api_definitions.id'],
            ),
            sa.PrimaryKeyConstraint('id'),
        )
    except OperationalError as e:
        if 'table api_definition_versions already exists' in str(e):
            pass  # Table already exists, continue with migration
        else:
            raise  # Re-raise if it's a different error

    # Add api_definition_version_id to jobs table if it doesn't exist
    # Check if column exists first
    conn = op.get_bind()
    inspector = sa.inspect(conn)
    columns = [col['name'] for col in inspector.get_columns('jobs')]

    if 'api_definition_version_id' not in columns:
        # For SQLite, we need to use batch operations to add a column with a foreign key
        try:
            # First, just add the column without the foreign key
            op.add_column(
                'jobs', sa.Column('api_definition_version_id', sa.TEXT(), nullable=True)
            )

            # We'll skip adding the foreign key constraint for SQLite
            # The ORM will still enforce the relationship
        except Exception as e:
            print(f'Error adding column: {e}')
            # If there's an error, it might be because the column already exists
            pass
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Drop foreign key and column from jobs table
    try:
        # For SQLite, we can't drop constraints directly
        # Just try to drop the column
        op.drop_column('jobs', 'api_definition_version_id')
    except Exception as e:
        print(f'Error dropping column: {e}')
        pass  # Ignore errors if constraint or column doesn't exist

    # Drop api_definition_versions table
    try:
        op.drop_table('api_definition_versions')
    except Exception as e:
        print(f'Error dropping api_definition_versions table: {e}')
        pass  # Ignore errors if table doesn't exist

    # Drop api_definitions table
    try:
        op.drop_table('api_definitions')
    except Exception as e:
        print(f'Error dropping api_definitions table: {e}')
        pass  # Ignore errors if table doesn't exist
    # ### end Alembic commands ###
