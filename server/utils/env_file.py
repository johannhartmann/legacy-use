from typing import Any
from pathlib import Path


def write_to_env_file(env_file_path: Path, key: str, value: Any) -> None:
    """Write or update a setting in the .env.local file"""
    # Convert value to string representation suitable for env file
    if value is None:
        env_value = ''
    elif isinstance(value, bool):
        env_value = str(value).lower()
    else:
        env_value = str(value)

    # Read existing .env.local content
    env_local_content = {}
    if env_file_path.exists():
        with open(env_file_path, 'r') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#') and '=' in line:
                    env_key, env_val = line.split('=', 1)
                    env_local_content[env_key.strip()] = env_val.strip()

    # Update or add the new setting
    env_local_content[key] = env_value

    # Write back to .env.local
    env_file_path.parent.mkdir(parents=True, exist_ok=True)
    with open(env_file_path, 'w') as f:
        f.write('# Local environment overrides\n')
        f.write('# This file is automatically generated when settings are modified\n\n')
        for env_key, env_val in sorted(env_local_content.items()):
            f.write(f'{env_key}={env_val}\n')
