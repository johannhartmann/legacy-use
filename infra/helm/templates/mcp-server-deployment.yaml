{{- if .Values.mcpServer.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "legacy-use.fullname" . }}-mcp-server
  labels:
    {{- include "legacy-use.labels" . | nindent 4 }}
    app.kubernetes.io/component: mcp-server
spec:
  replicas: {{ .Values.mcpServer.replicaCount }}
  selector:
    matchLabels:
      {{- include "legacy-use.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: mcp-server
  template:
    metadata:
      labels:
        {{- include "legacy-use.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: mcp-server
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "legacy-use.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.mcpServer.podSecurityContext | nindent 8 }}
      initContainers:
        - name: wait-for-mgmt
          image: busybox:1.36
          command: ['sh', '-c']
          args:
            - |
              echo "Waiting for management API to be ready..."
              until wget -q --spider http://{{ include "legacy-use.fullname" . }}-mgmt:{{ .Values.management.service.backendPort }}/health; do
                echo "Management API not ready yet, waiting..."
                sleep 5
              done
              echo "Management API is ready!"
      containers:
        - name: mcp-server
          securityContext:
            {{- toYaml .Values.mcpServer.securityContext | nindent 12 }}
          image: "{{ .Values.mcpServer.image.repository }}:{{ .Values.mcpServer.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.mcpServer.image.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ .Values.mcpServer.service.port }}
              protocol: TCP
          env:
            - name: DATABASE_URL
              {{- if .Values.database.enabled }}
              value: "postgresql://{{ .Values.database.postgresUser }}:{{ .Values.database.postgresPassword }}@{{ include "legacy-use.fullname" . }}-database:5432/{{ .Values.database.postgresDatabase }}"
              {{- else if .Values.mcpServer.env.DATABASE_URL }}
              value: {{ .Values.mcpServer.env.DATABASE_URL | quote }}
              {{- end }}
            - name: LEGACY_USE_URL
              value: "http://{{ include "legacy-use.fullname" . }}-mgmt:{{ .Values.management.service.backendPort }}"
            - name: LEGACY_USE_API_KEY
              {{- if .Values.mcpServer.env.LEGACY_USE_API_KEY }}
              value: {{ .Values.mcpServer.env.LEGACY_USE_API_KEY | quote }}
              {{- else if .Values.mcpServer.existingSecret }}
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.mcpServer.existingSecret }}
                  key: legacy-use-api-key
              {{- end }}
            - name: LOG_LEVEL
              value: {{ .Values.mcpServer.logLevel | quote }}
            - name: SYNC_INTERVAL
              value: {{ .Values.mcpServer.syncInterval | quote }}
            - name: MCP_SERVER_HOST
              value: "0.0.0.0"
            - name: MCP_SERVER_PORT
              value: {{ .Values.mcpServer.service.port | quote }}
            - name: MCP_SERVER_PATH
              value: "/mcp"
            {{- with .Values.mcpServer.extraEnv }}
            {{- toYaml . | nindent 12 }}
            {{- end }}
          resources:
            {{- toYaml .Values.mcpServer.resources | nindent 12 }}
      {{- with .Values.mcpServer.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.mcpServer.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.mcpServer.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
{{- end }}