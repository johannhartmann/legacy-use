{{- if .Values.database.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "legacy-use.fullname" . }}-database
  labels:
    {{- include "legacy-use.labels" . | nindent 4 }}
    app.kubernetes.io/component: database
spec:
  replicas: 1
  selector:
    matchLabels:
      {{- include "legacy-use.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: database
  template:
    metadata:
      labels:
        {{- include "legacy-use.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: database
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "legacy-use.serviceAccountName" . }}
      containers:
        - name: postgres
          securityContext:
            {{- toYaml .Values.database.securityContext | nindent 12 }}
          image: "{{ .Values.database.image.repository }}:{{ .Values.database.image.tag }}"
          imagePullPolicy: {{ .Values.database.image.pullPolicy }}
          ports:
            - name: postgres
              containerPort: 5432
              protocol: TCP
          env:
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.database.existingSecret | default (printf "%s-database-secret" (include "legacy-use.fullname" .)) }}
                  key: postgres-password
            - name: POSTGRES_DB
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.database.existingSecret | default (printf "%s-database-secret" (include "legacy-use.fullname" .)) }}
                  key: postgres-database
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.database.existingSecret | default (printf "%s-database-secret" (include "legacy-use.fullname" .)) }}
                  key: postgres-user
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - pg_isready -U {{ .Values.database.postgresUser }} -d {{ .Values.database.postgresDatabase }}
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - pg_isready -U {{ .Values.database.postgresUser }} -d {{ .Values.database.postgresDatabase }}
            initialDelaySeconds: 5
            periodSeconds: 5
          resources:
            {{- toYaml .Values.database.resources | nindent 12 }}
          volumeMounts:
            - name: data
              mountPath: /var/lib/postgresql/data
      volumes:
        - name: data
          {{- if .Values.database.persistence.enabled }}
          persistentVolumeClaim:
            claimName: {{ include "legacy-use.fullname" . }}-database
          {{- else }}
          emptyDir: {}
          {{- end }}
      {{- with .Values.database.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.database.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.database.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
{{- end }}