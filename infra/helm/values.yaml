# Default values for legacy-use.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# Secrets configuration
secrets:
  # Create a Kubernetes secret with API keys
  create: false
  # API key for legacy-use authentication
  apiKey: ""
  # Anthropic API key for AI functionality
  anthropicApiKey: ""

# Global settings
imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

# Service Account
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# Database Configuration (PostgreSQL)
database:
  enabled: true
  image:
    repository: postgres
    pullPolicy: IfNotPresent
    tag: "15-alpine"
  
  # Database credentials - should be overridden via secrets in production
  # These defaults are only for local development
  postgresUser: postgres
  postgresPassword: postgres
  postgresDatabase: legacy_use_demo
  
  # Use existing secret for database credentials
  # If set, the secret must contain: postgres-password, postgres-user, postgres-database
  existingSecret: ""
  
  service:
    type: ClusterIP
    port: 5432
  
  persistence:
    enabled: true
    storageClass: ""
    accessMode: ReadWriteOnce
    size: 10Gi
  
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 128Mi
  
  podSecurityContext: {}
  
  securityContext: {}
  
  nodeSelector: {}
  tolerations: []
  affinity: {}

# Legacy-use Management Service (combined backend + frontend)
management:
  replicaCount: 1
  
  image:
    repository: legacy-use-mgmt
    pullPolicy: IfNotPresent
    tag: "local"
  
  service:
    type: ClusterIP
    backendPort: 8088
    frontendPort: 5173
  
  env:
    LEGACY_USE_DEBUG: "0"
    # DATABASE_URL is auto-generated if database.enabled is true
    # Otherwise specify it here:
    # DATABASE_URL: "postgresql://user:password@host:port/database"
    # ANTHROPIC_API_KEY: "your-api-key"
  
  # Reference to existing secret for sensitive data
  # existingSecret: "legacy-use-secrets"
  
  # Additional environment variables
  extraEnv: []
  
  persistence:
    enabled: false
    storageClass: ""
    accessMode: ReadWriteOnce
    size: 5Gi
  
  resources:
    limits:
      cpu: 1000m
      memory: 1Gi
    requests:
      cpu: 200m
      memory: 256Mi
  
  podSecurityContext: {}
  
  securityContext: {}
  
  podAnnotations: {}
  
  nodeSelector: {}
  tolerations: []
  affinity: {}

# Shared noVNC Proxy Configuration
novncProxy:
  enabled: true
  
  image:
    repository: legacy-use-novnc-proxy
    pullPolicy: IfNotPresent
    tag: "local"
  
  replicas: 1
  
  service:
    type: ClusterIP
    port: 80
  
  resources:
    limits:
      cpu: 200m
      memory: 256Mi
    requests:
      cpu: 100m
      memory: 128Mi
  
  nodeSelector: {}
  tolerations: []
  affinity: {}

# MCP Server Configuration
mcpServer:
  enabled: true
  replicaCount: 1
  
  image:
    repository: legacy-use-mcp-server
    pullPolicy: IfNotPresent
    tag: "local"
  
  service:
    type: ClusterIP
    port: 3000
  
  # MCP server configuration
  logLevel: "INFO"
  syncInterval: "30"
  
  env:
    # DATABASE_URL is auto-generated if database.enabled is true
    # LEGACY_USE_URL is auto-generated
    # LEGACY_USE_API_KEY: "your-api-key"
  
  # Reference to existing secret for sensitive data
  # existingSecret: "legacy-use-secrets"
  
  # Additional environment variables
  extraEnv: []
  
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 128Mi
  
  podSecurityContext:
    runAsNonRoot: true
    runAsUser: 1000
  
  securityContext:
    allowPrivilegeEscalation: false
    readOnlyRootFilesystem: false
  
  nodeSelector: {}
  tolerations: []
  affinity: {}

# Nginx Reverse Proxy Configuration
nginx:
  enabled: true
  replicaCount: 1
  
  image:
    repository: legacy-use-nginx
    pullPolicy: IfNotPresent
    tag: "local"
  
  # Basic authentication configuration
  basicAuth:
    enabled: false
    username: "mayflower"
    password: "best4all"
  
  service:
    type: ClusterIP
    port: 80
  
  resources:
    limits:
      cpu: 200m
      memory: 128Mi
    requests:
      cpu: 100m
      memory: 64Mi
  
  podSecurityContext: {}
  
  securityContext: {}
  
  nodeSelector: {}
  tolerations: []
  affinity: {}

# Main Ingress Configuration
ingress:
  enabled: true
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: legacy-use.local
      paths:
        - path: /
          pathType: Prefix
        - path: /api
          pathType: Prefix
        - path: /mcp
          pathType: Prefix
  tls: []
  #  - secretName: legacy-use-tls
  #    hosts:
  #      - legacy-use.local

# Wine Target Configuration (Lightweight Windows app support)
wineTarget:
  enabled: true
  replicas: 1
  
  image:
    repository: legacy-use-wine-target
    pullPolicy: IfNotPresent
    tag: "local"
  
  # Wine configuration
  wineArch: "win64"  # win32 or win64
  
  labels:
    legacy-use.target-type: "wine"
    legacy-use.scalable: "true"
  
  service:
    type: ClusterIP
    vncPort: 5900
    novncPort: 6080
  
  persistence:
    enabled: true
    storageClass: ""
    accessMode: ReadWriteOnce
    wineSize: 10Gi
    appsSize: 5Gi
  
  resources:
    limits:
      cpu: 2
      memory: 2Gi
    requests:
      cpu: 500m
      memory: 512Mi
  
  podSecurityContext: {}
  securityContext: {}
  
  nodeSelector: {}
  tolerations: []
  affinity: {}
  
  ingress:
    enabled: false
    className: ""
    annotations: {}
    hosts: []
    tls: []

# Linux Target Configuration
linuxTarget:
  enabled: true
  replicas: 1
  
  image:
    repository: linux-machine
    pullPolicy: IfNotPresent
    tag: "local"
  
  labels:
    legacy-use.target-type: "linux"
    legacy-use.scalable: "true"
  
  service:
    type: ClusterIP
    vncPort: 5900
    novncPort: 80
  
  resources:
    limits:
      cpu: 1
      memory: 1Gi
    requests:
      cpu: 500m
      memory: 512Mi
  
  podSecurityContext: {}
  securityContext: {}
  
  nodeSelector: {}
  tolerations: []
  affinity: {}

# Android Target Configuration
androidTarget:
  enabled: true
  replicas: 1
  
  image:
    repository: legacy-use-android-target
    pullPolicy: IfNotPresent
    tag: "local"
  
  labels:
    legacy-use.target-type: "android"
    legacy-use.scalable: "true"
  
  # Android emulator configuration
  emulatorDevice: "Samsung Galaxy S10"
  webVnc: "true"
  
  service:
    type: ClusterIP
    adbPort: 5555
    vncPort: 5900
    novncPort: 6080
  
  persistence:
    enabled: true
    storageClass: ""
    accessMode: ReadWriteOnce
    androidSize: 20Gi
    appsSize: 5Gi
  
  resources:
    limits:
      cpu: 4
      memory: 6Gi
    requests:
      cpu: 2
      memory: 4Gi
  
  podSecurityContext:
    privileged: true
  
  securityContext:
    privileged: true
  
  nodeSelector: {}
  tolerations: []
  affinity: {}
  
  ingress:
    enabled: false
    className: ""
    annotations: {}
    hosts: []
    tls: []

# Windows XP KubeVirt VM Configuration (Requires KubeVirt in cluster)
windowsXpKubevirt:
  enabled: false
  replicas: 1  # Number of Windows XP VM instances
  
  # VM configuration
  hostname: "legacy-winxp"
  cpu:
    cores: 2
  memory: "2Gi"  # Match working QEMU setup
  
  # Labels for the VMs
  labels:
    legacy-use.target-type: "windows-xp-vm"
    legacy-use.scalable: "true"
  
  # Container disk configuration (recommended for production)
  containerDisk:
    image: "registry.git.mayflower.de/legacy-use/legacy-use/legacy-use-windows-xp-containerdisk:latest"
    pullPolicy: "IfNotPresent"
  
  
  # Disk configuration
  # Option 1: Use ephemeral disk (creates new disk for each VM instance)
  ephemeralDisk: false
  
  # Persistence configuration (for ephemeral disk template)
  persistence:
    enabled: true
    accessMode: ReadWriteOnce
    size: "100Gi"
    storageClass: ""
  
  
  # Service configuration
  service:
    type: ClusterIP
    rdpPort: 3389
    vncPort: 5900
  
  # Cloud-init user data (optional)
  userData: |
    # Add any cloud-init configuration here
    # Note: Windows requires cloudbase-init
  
  # Node selector for VMs
  nodeSelector: {}
    # kubernetes.io/hostname: node-with-kubevirt
  
  # Tolerations for VMs
  tolerations: []
  
  # Affinity rules
  affinity: {}

# Windows 10 KubeVirt VM Configuration (Requires KubeVirt in cluster)
windows10Kubevirt:
  enabled: false
  replicas: 1  # Number of Windows 10 VM instances
  
  # VM configuration
  hostname: "legacy-win10"
  cpu:
    cores: 4
  memory: "2Gi"  # Reduced from 8Gi to 2Gi
  
  # Labels for the VMs
  labels:
    legacy-use.target-type: "windows-10-vm"
    legacy-use.scalable: "true"
  
  # Container disk configuration (recommended for production)
  containerDisk:
    image: "registry.git.mayflower.de/legacy-use/legacy-use/legacy-use-windows-10-containerdisk:latest"
    pullPolicy: "IfNotPresent"
  
  
  # Disk configuration
  # Option 1: Use ephemeral disk (creates new disk for each VM instance)
  ephemeralDisk: false
  
  # Persistence configuration (for ephemeral disk template)
  persistence:
    enabled: true
    accessMode: ReadWriteOnce
    size: "120Gi"  # Windows 10 needs more space than XP
    storageClass: ""
  
  
  # Service configuration
  service:
    type: ClusterIP
    rdpPort: 3389
    vncPort: 5900
  
  # User data for cloud-init (if supported by the image)
  userData: |
    # Add any cloud-init configuration here
    # Note: Windows requires cloudbase-init
  
  # Node selector for VMs
  nodeSelector: {}
    # kubernetes.io/hostname: node-with-kubevirt
  
  # Tolerations for VMs
  tolerations: []
  
  # Affinity rules
  affinity: {}

# macOS Mojave KubeVirt VM Configuration (Requires KubeVirt in cluster)
macosMojaveKubevirt:
  enabled: true
  replicas: 1  # Number of macOS Mojave VM instances
  
  # VM configuration
  hostname: "legacy-mojave"
  cpu:
    cores: 4
  memory: "4Gi"  # macOS needs reasonable memory
  
  # Labels for the VMs
  labels:
    legacy-use.target-type: "macos-mojave-vm"
    legacy-use.scalable: "true"
  
  # Container disk image from registry
  containerDisk:
    image: "registry.git.mayflower.de/legacy-use/legacy-use/legacy-use-macos-mojave-containerdisk:latest"
    pullPolicy: "IfNotPresent"
  
  # Custom virt-launcher image with Apple SMC support
  launcherImage: "localhost:5000/virt-launcher-macos:local"
  
  # OVMF firmware images
  ovmfCode:
    image: "registry.git.mayflower.de/legacy-use/legacy-use/macos-ovmf-code:latest"
  ovmfVars:
    image: "registry.git.mayflower.de/legacy-use/legacy-use/macos-ovmf-vars:latest"
  openCore:
    image: "registry.git.mayflower.de/legacy-use/legacy-use/macos-opencore:latest"
  
  # Disk configuration
  disk:
    size: "64Gi"
    storageClass: ""
  
  
  # Service configuration
  service:
    type: ClusterIP
    vncPort: 5900
    additionalPorts: []
  
  # User data for cloud-init
  userData: |
    # macOS cloud-init configuration
  
  # Node selector for VMs
  nodeSelector: {}
  
  # Tolerations for VMs
  tolerations: []
  
  # Affinity rules
  affinity: {}

# Autoscaling Configuration (for management service)
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 10
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80

# Pod disruption budget
podDisruptionBudget:
  enabled: false
  minAvailable: 1
  # maxUnavailable: 1

# DOSBox Target Configuration
dosboxTarget:
  enabled: true
  replicas: 1
  
  image:
    repository: legacy-use-dosbox-target
    pullPolicy: IfNotPresent
    tag: "local"
  
  labels:
    legacy-use.target-type: "dosbox"
    legacy-use.scalable: "true"
  
  # VNC configuration
  vncGeometry: "1024x768"
  vncDepth: "16"
  
  service:
    type: ClusterIP
    vncPort: 5900
  
  persistence:
    enabled: true
    storageClass: ""
    accessMode: ReadWriteOnce
    size: 5Gi
  
  resources:
    limits:
      cpu: 1
      memory: 512Mi
    requests:
      cpu: 200m
      memory: 256Mi
  
  podSecurityContext: {}
  securityContext: {}
  
  nodeSelector: {}
  tolerations: []
  affinity: {}

# Android AinD Target Configuration (Android in Docker with native VNC)
androidAindTarget:
  enabled: true
  replicas: 1
  
  image:
    repository: legacy-use-android-aind-target
    pullPolicy: IfNotPresent
    tag: "local"
  
  labels:
    legacy-use.target-type: "android-aind"
    legacy-use.scalable: "true"
  
  service:
    type: ClusterIP
    vncPort: 5900
  
  persistence:
    enabled: true
    storageClass: ""
    accessMode: ReadWriteOnce
    size: 10Gi
  
  resources:
    limits:
      cpu: 2
      memory: 2Gi
    requests:
      cpu: 1
      memory: 1Gi
  
  podSecurityContext:
    privileged: true
  
  securityContext:
    privileged: true
  
  nodeSelector: {}
  tolerations: []
  affinity: {}

# Network policies
networkPolicy:
  enabled: false
  ingress:
    enabled: true
    allowedPods: []
    allowedNamespaces: []
  egress:
    enabled: true
    allowedPods: []
    allowedNamespaces: []