# Default values for legacy-use.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

backend:
  image:
    repository: legacy-use-backend
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: "local"
  service:
    type: ClusterIP
    port: 8088
  env:
    # DATABASE_URL: "postgresql://user:password@host:port/database"
    LEGACY_USE_DEBUG: "0"

frontend:
  image:
    repository: legacy-use-frontend
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: "local"
  service:
    type: ClusterIP
    port: 80

ingress:
  enabled: true
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
          backend:
            service:
              name: frontend
              port:
                number: 80
        - path: /api
          pathType: ImplementationSpecific
          backend:
            service:
              name: backend
              port:
                number: 8088
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the
  # following lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

# Windows Target Configuration
windowsTarget:
  enabled: false
  replicas: 1
  image:
    repository: dockurr/windows
    pullPolicy: IfNotPresent
    tag: "latest"
  
  # Windows configuration
  windowsVersion: "11"
  diskSize: "64G"
  ramSize: "8G"
  cpuCores: "4"
  username: "LegacyUser"
  password: "LegacyPass123!"
  
  # Storage
  storageSize: "100Gi"
  
  # Enable KVM device (required for Windows)
  kvmDevice: true
  
  service:
    type: ClusterIP
  
  resources:
    limits:
      cpu: 4
      memory: 8Gi
    requests:
      cpu: 2
      memory: 4Gi
  
  podSecurityContext:
    privileged: true
  
  securityContext:
    privileged: true
    capabilities:
      add:
        - NET_ADMIN
        - SYS_ADMIN
  
  nodeSelector: {}
    # kubernetes.io/hostname: node-with-kvm
  
  tolerations: []
  
  affinity: {}

# Wine Target Configuration (Lightweight Windows app support)
wineTarget:
  enabled: false
  replicas: 1
  image:
    repository: legacy-use-wine-target
    pullPolicy: IfNotPresent
    tag: "local"
  
  # Wine configuration
  wineArch: "win64"  # win32 or win64
  
  service:
    type: ClusterIP
  
  persistence:
    enabled: true
    storageClass: ""
    accessMode: ReadWriteOnce
    size: 10Gi
  
  resources:
    limits:
      cpu: 2
      memory: 2Gi
    requests:
      cpu: 500m
      memory: 512Mi
  
  podSecurityContext: {}
  
  securityContext: {}
  
  nodeSelector: {}
  
  tolerations: []
  
  affinity: {}
